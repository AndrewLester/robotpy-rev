#
# This file is autogenerated, do not edit manually. Instead,
# edit {{ config.data }}
#

import typing

import hal
from .sim_enums import *

class NotifyDict(dict):
    """
        Allows us to listen to changes in the dictionary --
        note that we don't wrap everything, because for our
        purposes we don't care about the rest
        We only use these for some keys in the hal_data dict,
        as not all keys are useful to listen to
    """

    __slots__ = ["cbs"]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.cbs = {}

    def register(self, k, cb, notify=False):
        """
            register a function to be called when an item is set
            with in this dictionary. We raise a key error if the
            key passed is not a key that the dictionary contains.
            :param k:        Key to be registered for call back. The key must be a
                             valid key with in the dictionary
            :param cb:       Function to be called if k is set. This function needs
                             to take at least 2 parameters
            :param notify:   Calls the function cb after registering k
        """
        if k not in self:
            raise KeyError("Cannot register for non-existant key '%s'" % k)
        self.cbs.setdefault(k, []).append(cb)
        if notify:
            cb(k, self[k])

    def __setitem__(self, k, v):
        """
           Overrides __setitem__. If k has any callback functions defined they are
           called from here
           :param k: key to be set
           :param v: value to be set
        """
        super().__setitem__(k, v)

        # Call the callbacks
        for cb in self.cbs.get(k, []):
            try:
                cb(k, v)
            except:
                logger.exception("BAD INTERNAL ERROR")

class AutoVivification(dict):
    """Implementation of perl's autovivification feature."""
    def __getitem__(self, item):
        try:
            return dict.__getitem__(self, item)
        except KeyError:
            value = self[item] = type(self)()
            return value

hal_data = AutoVivification()

{% for header in headers %}
{% for cls in header.classes if 'ignore' not in cls.data %}

class {{ cls.name }}{% if '__bases__' in cls.data %}({{ cls.data['__bases__'] }}){% endif %}:
  {% for fn in cls.methods.public %}
  {% if 'simfn' in fn.data %}
    {{ fn.data.simfn  | indent(width=4) }}
  {% elif 'overload' in fn.data %}
    @typing.overload
    def {{ fn.x_name }}(self{% if fn.x_in_params %}, {{ fn.x_in_params | join(', ', attribute='x_pyann') }}{% endif %}) -> {{ fn.x_pyann_ret }}:
        ...

  {% elif 'ignore' not in fn.data %}
    def {{ fn.x_name }}(self{% if fn.x_in_params %}, {{ fn.x_in_params | join(', ', attribute='x_pyann') }}{% endif %}) -> {{ fn.x_pyann_ret }}:
    {% if 'doc' in fn or not fn.hascode %}
        """{{ fn.get('doc', '') | indent(width=8) }}
        {% if not fn.hascode %}

        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.

        {% endif %}
        """
    {% endif %}
    {% if fn.x_param_checks %}
        {{ fn.x_param_checks | join('\n') | indent(width=8) }}
    {% endif %}
    {% if 'code' in fn.data %}
        {{ fn.data['code'] | trim | indent(width=8) }}
    {% elif 'get' in fn.data %}
        retval = self._hal_data["{{ fn.data['get'] }}"]
        {% if fn.data.get('invert', False) %}
        if self._inverted:
            retval = -retval
        {% endif %}
    {% elif 'set' in fn.data %}
        {% if fn.data.get('invert', False) %}
        if self._inverted:
            {{ fn.parameters[0]['name'] }} *= -1
        {% endif %}
        self._hal_data["{{ fn.data['set'] }}"] = {{ fn.parameters[0]['name'] }}
    {% endif %}
    {% if not fn.hascode %}
        raise NotImplementedError("{{ fn.x_name }} not implemented in simulation (file a bug on github if you need it)")
    {% else %}
    {% if fn.x_return_checks %}
        {{ fn.x_return_checks | join('\n') | indent(width=8) }}
    {% endif %}
    {% if fn.x_rets %}
        return retval
    {% endif %}
    {% endif %}

  {% endif %}
  {% endfor %}
{% if cls.data.sim_class_extra is defined %}
    {{ cls.data.sim_class_extra | indent(width=4) }}
{% endif %}
{% endfor %}
{% endfor %}
