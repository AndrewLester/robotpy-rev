---
CANDigitalInput:
  CANDigitalInput:  # constructor
    code: |
      self._device = device
      self._limitSwitch = limitSwitch
      # TODO store polarity (not here judging by the header)

CANEncoder:
  CANEncoder:  # constructor
    code: |
      self._device = device

CANPIDController:
  CANPIDController:  # constructor
    code: |
      self._device = device

CANSparkMaxLowLevel:
  CANSparkMaxLowLevel:  # constructor
    param_override:
      type:
        x_type: rev::CANSparkMaxLowLevel::MotorType
  GetFirmwareVersion:
    ignore: true  # overload
  SetParameter:
    ignore: true  # overload
  GetParameter:
    ignore: true  # overload

CANSparkMax:
  __bases__: CANSparkMaxLowLevel
  cpp_inherits: rev::CANSparkMaxLowLevel

  CANSparkMax:  # constructor
    param_override:
      type:
        x_type: rev::CANSparkMaxLowLevel::MotorType
    code: |
      super().__init__(deviceID, type)
  SetInverted:
    set: inverted
  GetInverted:
    get: inverted
  PIDWrite:
    rename: pidWrite
    code: |
      self.set(output)
  GetEncoder:
    code: |
      retval = CANEncoder(self)
  GetPIDController:
    code: |
      retval = CANPIDController(self)
  GetForwardLimitSwitch:
    code: |
      retval = CANDigitalInput(self, LimitSwitch.kForward, polarity)
  GetReverseLimitSwitch:
    code: |
      retval = CANDigitalInput(self, LimitSwitch.kReverse, polarity)
  SetSmartCurrentLimit:
    ignore: true  # overload
  Follow:
    ignore: true  # overload
  BurnFlash:
    code: ""
