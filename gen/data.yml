---
CANDigitalInput:
  methods:
    CANDigitalInput:  # constructor
      code: |
        self._device = device
        self._limitSwitch = limitSwitch
        # TODO store polarity (not here judging by the header)

CANEncoder:
  methods:
    CANEncoder:  # constructor
      code: |
        self._device = device

CANPIDController:
  methods:
    CANPIDController:  # constructor
      code: |
        self._device = device

CANSparkMaxLowLevel:
  methods:
    CANSparkMaxLowLevel:  # constructor
      param_override:
        type:
          x_type: rev::CANSparkMaxLowLevel::MotorType
    GetFirmwareVersion:
      ignore: true  # overload
    SetParameter:
      ignore: true  # overload
    GetParameter:
      ignore: true  # overload

CANSparkMax:
  # __bases__: CANSparkMaxLowLevel
  # cpp_inherits: rev::CANSparkMaxLowLevel

  methods:
    CANSparkMax:  # constructor
      param_override:
        type:
          x_type: rev::CANSparkMaxLowLevel::MotorType
      code: |
        # super().__init__(deviceID, type)
        self._hal_data = NotifyDict({
            "value": 0.0,
            "inverted": False,
            "idle_mode": IdleMode.kCoast,
            "ramp_rate": 0.0,
        })
        # TODO stick this into the global HAL data
    Set:
      set: value
    Get:
      get: value
    SetInverted:
      set: inverted
    GetInverted:
      get: inverted
    PIDWrite:
      rename: pidWrite
      code: |
        self.set(output)
    GetEncoder:
      code: |
        retval = CANEncoder(self)
    GetPIDController:
      code: |
        retval = CANPIDController(self)
    GetForwardLimitSwitch:
      code: |
        retval = CANDigitalInput(self, LimitSwitch.kForward, polarity)
    GetReverseLimitSwitch:
      code: |
        retval = CANDigitalInput(self, LimitSwitch.kReverse, polarity)
    SetSmartCurrentLimit:
      ignore: true  # overload
    SetIdleMode:
      set: idle_mode
    GetIdleMode:
      get: idle_mode
    SetRampRate:
      set: ramp_rate
    GetRampRate:
      get: ramp_rate
    Follow:
      ignore: true  # overload
    GetFaults:
      code: |
        retval = 0
    GetStickyFaults:
      code: |
        retval = 0
    GetFault:
      code: |
        retval = False
    GetStickyFault:
      code: |
        retval = False
    ClearFaults:
      code: ""
    BurnFlash:
      code: ""
    SetCANTimeout:
      set: can_timeout
